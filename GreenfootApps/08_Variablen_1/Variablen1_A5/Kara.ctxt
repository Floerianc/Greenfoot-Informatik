#BlueJ class context
comment0.target=Kara
comment0.text=\r\n\ Diese\ Klasse\ ist\ die\ Oberklasse\ fuer\ alle\ Karas.\ Programme\ sollten\ nur\ in\ den\ \r\n\ Unterklassen\ geschrieben\ werden,\ da\ diese\ Klasse\ recht\ komplex\ ist.\r\n\ \r\n\ Der\ Marienkaefer\ Kara\ kann\ sich\ felderweise\ in\ die\ vier\ Richtungen\ bewegen.\ Falls\ Kara\ \r\n\ ueber\ den\ Rand\ der\ Wiese\ hinausgeht,\ erscheint\ er\ auf\ der\ anderen\ Seite\ wieder.\r\n\ Kara\ kann\ Pilze\ stossen,\ Blaetter\ auflesen\ und\ setzen,\ jedoch\ nicht\ durch\ Baeume\r\n\ hindurchgehen.\r\n\ Ueber\ Sensoren\ kann\ er\ Informationen\ ueber\ seine\ Umwelt\ erhalten.\r\n\ \r\n\ @author\ Marco\ Jakob\r\n\ @version\ 18.01.2011\r\n
comment1.params=
comment1.target=void\ move()
comment1.text=\r\n\ Kara\ macht\ einen\ Schritt\ in\ die\ aktuelle\ Richtung.\r\n\ Das\ macht\ er\ nur,\ wenn\ ihm\ nichts\ im\ Weg\ steht\ (z.B.\ ein\ Baum\ oder\ ein\ Pilz,\ \r\n\ den\ er\ nicht\ stossen\ kann).\r\n\ Falls\ Kara\ ueber\ den\ Rand\ der\ Wiese\ hinausgeht,\ erscheint\ er\ auf\ der\ anderen\ \r\n\ Seite\ wieder.\r\n
comment10.params=
comment10.target=boolean\ mushroomFront()
comment10.text=\r\n\ Kara\ schaut\ nach,\ ob\ er\ einen\ Pilz\ vor\ sich\ hat.\r\n\ \r\n\ @return\ true,\ falls\ Kara\ vor\ einem\ Pilz\ steht,\ andernfalls\ false\ \ \ \ \ \r\n
comment11.params=
comment11.target=boolean\ canMove()
comment11.text=\r\n\ Ueberprueft,\ ob\ sich\ Kara\ bewegen\ kann.\ Falls\ ein\ Pilz\ vor\ ihm\ steht,\ versucht\ er\r\n\ ihn\ zu\ schieben.\r\n\ \r\n\ @return\ true,\ wenn\ sich\ Kara\ bewegen\ kann,\ andernfalls\ false\r\n
comment12.params=direction\ steps\ cls
comment12.target=java.lang.Object\ getObjectInFront(int,\ int,\ java.lang.Class)
comment12.text=\r\n\ Schaut\ nach,\ ob\ auf\ dem\ Feld\ in\ der\ angegebenen\ Richtung\ ein\ Objekt\ von\ einer\ bestimmten\r\n\ Klasse\ vorhanden\ ist.\r\n\ \r\n\ @param\ direction\ die\ Richtung,\ in\ der\ man\ schauen\ soll\r\n\ @param\ steps\ \ \ \ \ die\ Schritte,\ welche\ in\ die\ angegebene\ Richtung\ gemacht\ werden\ soll\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (1\ bedeutet\ das\ benachbarte\ Feld,\ 2\ das\ uebernaechste\ Feld\ usw.)\r\n\ @param\ cls\ \ \ \ \ \ \ die\ Klasse,\ von\ welcher\ ein\ Objekt\ auf\ dem\ Feld\ gesucht\ werden\r\n\ @return\ \ \ \ \ \ \ \ \ \ das\ Objekt,\ das\ von\ dieser\ Klasse\ auf\ dem\ Feld\ ist\ oder\ null\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ wenn\ es\ nicht\ vorkommt.\r\n
comment13.params=actor\ direction
comment13.target=void\ moveActor(greenfoot.Actor,\ int)
comment13.text=\r\n\ Bewegt\ den\ Actor\ einen\ Schritt\ in\ die\ angegebene\ Richtung.\r\n\ \r\n\ @param\ actor\ \ \ \ \ der\ zu\ bewegende\ Actor\r\n\ @param\ direction\ die\ Richtung\r\n
comment14.params=a\ b
comment14.target=int\ modulo(int,\ int)
comment14.text=\r\n\ Dies\ ist\ eine\ spezielle\ Modulo-Operation,\ damit\ wir\ bei\ negativen\ Zahlen\ \r\n\ trotzdem\ wieder\ innerhalb\ der\ Welt\ landen.\ Die\ Java-Modulo-Operation\ wuerde\ \r\n\ z.B.\ bei\ -1\ %\ 10\ zu\ -1\ fuehren,\ wir\ brauchen\ aber\ 9.\r\n\ Hinweis\:\ Je\ nach\ Programmiersprache\ ist\ die\ Modulo-Operation\ fuer\ negative\ \r\n\ Zahlen\ anders\ definiert.\r\n\ \r\n\ @param\ a\ der\ erste\ Operand\r\n\ @param\ b\ der\ zweite\ Operand\r\n\ @return\ das\ Resultat\ der\ Modulo-Operation\r\n
comment15.params=world
comment15.target=void\ addedToWorld(greenfoot.World)
comment15.text=\r\n\ Diese\ Methode\ wird\ aufgerufen,\ sobald\ ein\ Kara-Objekt\ auf\ der\ Welt\ platziert\ wurde.\r\n\ Es\ wird\ ueberprueft,\ ob\ Kara\ auf\ dieses\ Feld\ gesetzt\ werden\ darf.\ Falls\ nicht,\ wird\ eine\ \r\n\ Fehlermeldung\ ausgegeben.\r\n
comment2.params=
comment2.target=void\ turnLeft()
comment2.text=\r\n\ Kara\ dreht\ sich\ um\ 90\u00B0\ nach\ links.\r\n
comment3.params=
comment3.target=void\ turnRight()
comment3.text=\r\n\ Kara\ dreht\ sich\ um\ 90\u00B0\ nach\ rechts.\r\n
comment4.params=
comment4.target=void\ putLeaf()
comment4.text=\r\n\ Kara\ legt\ ein\ neues\ Kleeblatt\ an\ die\ Position,\ auf\ der\ er\ sich\ befindet.\r\n
comment5.params=
comment5.target=void\ removeLeaf()
comment5.text=\r\n\ Kara\ entfernt\ ein\ unter\ ihm\ liegendes\ Kleeblatt.\r\n
comment6.params=
comment6.target=boolean\ onLeaf()
comment6.text=\r\n\ Kara\ schaut\ nach,\ ob\ er\ sich\ auf\ einem\ Kleeblatt\ befindet.\r\n\ \r\n\ @return\ true,\ falls\ Kara\ auf\ einem\ Kleeblatt\ steht,\ andernfalls\ false\ \ \ \ \ \r\n
comment7.params=
comment7.target=boolean\ treeFront()
comment7.text=\r\n\ Kara\ schaut\ nach,\ ob\ sich\ ein\ Baum\ vor\ ihm\ befindet.\r\n\ \r\n\ @return\ true,\ falls\ Kara\ vor\ einem\ Baum\ steht,\ andernfalls\ false\ \ \ \ \ \r\n
comment8.params=
comment8.target=boolean\ treeLeft()
comment8.text=\r\n\ Kara\ schaut\ nach,\ ob\ sich\ ein\ Baum\ links\ von\ ihm\ befindet.\r\n\ \r\n\ @return\ true,\ falls\ links\ neben\ Kara\ ein\ Baum\ steht,\ andernfalls\ false\ \ \ \ \ \r\n
comment9.params=
comment9.target=boolean\ treeRight()
comment9.text=\r\n\ Kara\ schaut\ nach,\ ob\ sich\ ein\ Baum\ rechts\ von\ ihm\ befindet.\r\n\ \r\n\ @return\ true,\ falls\ rechts\ neben\ Kara\ ein\ Baum\ steht,\ andernfalls\ false\ \ \ \ \ \r\n
numComments=16
